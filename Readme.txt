Программа поиска НОД-ля для чисел длины не более 1000 в системах счисления от 2 до 70.

Используемые файлы:
Readme.txt - сведения о программе;
search_nod.pas - исходный код;
Каталог tests:
test_1.txt
...
test_27.txt - составленные тесты (первые 19 выявляют ошибки, остальные - дают успешный результат)
ОБЯЗАТЕЛЬНО К ПРОЧТЕНИЮ: tests_instructions_input_output.txt - приведены результаты программы на каждый тест (!) содержит правила ввода данных для корректной работы программы (!) указан весь список желательных и нежелательных сообщений (!) содержатся КОМАНДЫ, достаточные для запуска каждого теста

Особенности вычисления:
1. Программа работает с числами на языке массивов.
2. НОД-ль вычисляется в наибольшей системе счисления.
3. Ответ выводится в системе счисления числа С.
4. Программа работает только с первыми двумя введёнными числами!

Путь работы программы:
1. Считывание трёх СС для чисел A, B, C соответственно.
2. Считывание чисел A, B соответственно.
3. Перевод чисел в наиб СС.
4. Счёт НОД-ля.
5. Перевод в систему счисления числа C.
6. Показать ответ.

Типы данных:
num_t - целочисленный массив длины больше 1000
num_and_info_t - запись, хранящая всю важную информацию о введённом числе:
	look - его вид (представлен массивом, в котором каждый элемент - цифра числа)
	length - длина числа
	system - система счисления числа
division_t - используется при делении. Это запись, хранящая целую часть деления и остаток от деления чисел друг на друга.

Функции и процедуры:
Char_to_dig - дешифрование символа в целое число
Dig_to_char - шифрование целого числа в символ
Show_number - вывод числа
Compare - сравнение двух чисел
Compare_null - сравнение числа с нулём (равно ли?)
Add - сложение двух чисел в одной СС:
	1. Сравнить длины чисел, выявить, какое число короче.
	2. Приписать короткому числу в начале незначащие нули.
	3. Сложить числа в столбик.
	4. Сохранить ответ.
Multiply_by - умножение числа на однозначное число в одной СС:
	1. Проверить однозначное число на ноль (равно ли?).
	2. Умножить числа в столбик.
	3. Заполнить ответ.
Trans_bigger - перевод числа в большую СС:
	(по аналогии с переводом числа из 10 в 15 СС)
	15259 (10 СС) -> ? (15 СС)
	т.е. обрабатываем каждую цифру последовательно, весь счёт ведём в 15-ной системе счисления
Substract - вычитание из большего числа меньшего в одной СС
	1. Сравнять числа для вычитания в столбик
	2. Вычитание чисел в столбик по школьным законам
Divide_small - деление чисел в одной СС по принципу: складывай пока не превзойдёт
	(Стоит отметить, что такое деление обладает огромным количеством итераций при делении чисел разной длины)
	Возвращает целую часть от деления и остаток от деления
Divide - деление двух чисел в столбик по школьным правилам
	Реализовано через Divide_small
	Возвращает целую часть от деления и остаток от деления
Euclidus - вычисление НОД-ля для чисел в одной СС с помощью алгоритма Евклида через остатки от деления
Trans_smaller - перевод числа в меньшую СС
	(по аналогии с переводом числа из 10-ной в 3-ную: весь счёт происходит в большей СС)
	1. Поделить число на значение меньшей системы счисления
	2. Запомнить остаток
	3. Поделить целую часть от деления на значение меньшей системы счисления
	4. Продолжить вплоть до нуля
	5. Перевернуть число, составленное из остатков от деления